Instructions using : https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world


First, create a virtual environment in the project directory:

==============================================================================
++++
# cd to project directory. (Make directory if you need to)
#Powershell:
$ New-Item c:\PATH\[DIRECTORY NAME] -type directory
#Mac Terminal:
$ mkdir [Directory Name]
#OR (for multiple)
$ mkdir -p parentdir/childdir/etc

#Create the virtual environment
$ virtualenv [new virtual environment directory name]
++++
==============================================================================



The reason for this is to  create a folder in the current directory which will
  contain the Python executable files, and a copy of the pip library which you
  can use to install other packages. The name of the virtual environment (in
  this case, it was my_project) can be anything; omitting the name will place
  the files in the current directory instead.

Virtual env: http://python-guide-pt-br.readthedocs.io/en/latest/dev/virtualenvs/

Next, activate the virtual environment:

NOTE: in Powershell, you may have to run it as an administrator and use:
$ set-executionpolicy RemoteSigned
to allow it to run scripts.


==============================================================================
++++
#Powershell:
$ [new virtual environment directory name]/Scripts/activate.ps1
#Terminal
$ source [new virtual environment directory name]/bin/activate
++++
==============================================================================

NOTE: To deactivate the virtualenv, type:
$ deactivate


If you are on Linux, OS X or Cygwin, install flask and extensions by entering the following commands, one after another:

==============================================================================
++++
$ pip install flask
$ pip install flask-login
$ pip install flask-openid
$ pip install flask-mail
$ pip install flask-sqlalchemy
$ pip install sqlalchemy-migrate
$ pip install flask-whooshalchemy
$ pip install flask-wtf
$ pip install flask-babel
$ pip install guess_language
$ pip install flipflop
$ pip install coverage
++++
==============================================================================

If you are on Windows the commands are slightly different:
==============================================================================
++++
$ py -m pip install flask
$ py -m pip install flask-login
$ py -m pip install flask-openid
$ py -m pip install flask-mail
$ py -m pip install flask-sqlalchemy
$ py -m pip install sqlalchemy-migrate
$ py -m pip install flask-whooshalchemy
$ py -m pip install flask-wtf
$ py -m pip install flask-babel
$ py -m pip install guess_language
$ py -m pip install flipflop
$ py -m pip install coverage
++++
==============================================================================
These commands will download and install all the packages that we will use for
  our application.


You now have a sub-folder inside your microblog folder that is populated
  with a Python interpreter and the Flask framework and extensions that we will
  use for this application. Now it's time to write our first web application!

Now make some more directories in your application directory:
==============================================================================
++++
#Mac Terminal example:
$ mkdir app
$ mkdir app/static
$ mkdir app/templates
$ mkdir tmp

#Powershell example:
$ New-Item PATH\[APP DIRECTORY NAME]\app\static -type directory
$ New-Item PATH\[APP DIRECTORY NAME]\app\templates -type directory
$ New-Item PATH\tmp -type directory
++++
==============================================================================

The app folder will be where we will put our application package. The static
  sub-folder is where we will store static files like images, javascripts, and
  cascading style sheets. The templates sub-folder is obviously where our
  templates will go.


Now create a simple __init__ script for the app package (app/__init__.py). It
  should look like this:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
++++
from flask import Flask

app = Flask(__name__)
from app import views
++++
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The script above simply creates the application object (of class Flask) and
  then imports the views module, which we haven't written yet. Do not confuse
  app the variable (which gets assigned the Flask instance) with app the
  package (from which we import the views module).

If you are wondering why the import statement is at the end and not at the
  beginning of the script as it is always done, the reason is to avoid circular
  references, because you are going to see that the views module needs to
  import the app variable defined in this script. Putting the import at the end
  avoids the circular import error.

The views are the handlers that respond to requests from web browsers or other
clients. In Flask handlers are written as Python functions. Each view function
is mapped to one or more request URLs.

Let's write our first view function (file app/views.py):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
++++
from app import app

@app.route('/')
@app.route('/index')
def index():
    return "Hello, World!"
++++
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This view is actually pretty simple, it just returns a string, to be displayed
  on the client's web browser. The two route decorators above the function
  create the mappings from URLs / and /index to this function.

$env:FLASK_APP = "flaskr"
